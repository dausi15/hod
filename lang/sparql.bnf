!whitespace : '\t' | '\n' | '\r' | ' ' ;
_uppercase : 'A'-'Z' ;
_lowercase : 'a'-'z' ;
_digit : '0'-'9' ;
_varchar : (_uppercase | _lowercase | _digit | '_' ) ;
_varstring : _varchar {_varchar} ;
_urichar : ( _uppercase | _lowercase | _digit | '_' | '\\' | '-' | '#' | '%' | '$' | '@' ) ;
_uristring : _uristring {_uristring} ;
var : '?' _varstring ;
uri : _varstring ':' _varstring ;
url : '<' {.} '>' ; 
string : _varstring ;

<< import "github.com/gtfierro/hod/lang/ast" >>

/* syntax */
QueryUnit
    : SelectQuery ";" << $0, nil >>
    | CountQuery  ";" << $0, nil >>
    ;

SelectQuery
    : SelectClause DatasetClause WhereClause << ast.NewQueryMulti($0, $1, $2, false) >>
    | SelectClause WhereClause  << ast.NewQuery($0, $1, false) >>
    ;

CountQuery
    : CountClause DatasetClause WhereClause << ast.NewQueryMulti($0, $1, $2, true) >>
    | CountClause WhereClause  << ast.NewQuery($0, $1, true) >>
    ;

SelectClause
    : "SELECT" "*"      << ast.NewAllSelectClause() >>
    | "SELECT" Varlist  << ast.NewSelectClause($1) >>
    ;

CountClause
    : "COUNT" "*"      << ast.NewAllSelectClause() >>
    | "COUNT" Varlist  << ast.NewSelectClause($1) >>
    ;

Varlist
    : Var               << ast.NewVarList($0) >>
    | Varlist Var       << ast.AppendVar($0, $1) >>
    ;

DBlist
    : String            << ast.NewStringList($0) >>
    | DBlist String     << ast.AppendString($0, $1) >>
    ;

String : string << ast.ParseString($0) >> ;
Var : var << ast.ParseString($0) >> ;

DatasetClause
    : "FROM" DBlist << ast.NewFromClause($1) >>
    | "FROM" "*" << ast.NewAllFromClause() >>
    ;

WhereClause
    : "WHERE" "{" TriplesBlock "}"                  << ast.NewWhereClause($2) >>
    | "WHERE" "{" TriplesBlock "." "}"                  << ast.NewWhereClause($2) >>
    | "WHERE" "{" TriplesBlock RestOfWhereList "}"  << ast.NewWhereClauseWithGraphGroup($2, $3) >>
    | "WHERE" "{" TriplesBlock "." RestOfWhereList "}"  << ast.NewWhereClauseWithGraphGroup($2, $4) >>
    | "WHERE" "{" RestOfWhereList "}"               << ast.NewWhereClauseGraphGroup($2) >>
    ;

TriplesBlock
    : Triple                    << ast.NewTripleBlock($0) >>
    | TriplesBlock "." Triple   << ast.AppendTripleBlock($0, $2) >>
    ;

Triple
    : VarOrTerm Path VarOrTerm  << ast.NewTriple($0, $1, $2) >>
    ;

VarOrTerm
    : Var         << ast.NewURI($0) >>
    | GraphTerm   << ast.NewURI($0) >>
    ;

GraphTerm
    : uri       << ast.ParseString($0) >>
    | string    << ast.ParseString($0) >>
    | url       << ast.ParseString($0) >>
    /* TODO: numerical literal? */
    ;

Path
    : PathSequence          << $0, nil >>
    | Path "|" PathSequence /* TODO */
    | Var                   << ast.PathFromVar($0) >>
    ;

PathSequence
    : PathElt                   << ast.NewPathSequence($0) >>
    | PathSequence "/" PathElt  << ast.AppendPathSequence($0, $2) >>
    ;

PathElt
    : PathPrimary PathMod << ast.AddPathMod($0, $1) >>
    | PathPrimary   << $0, nil >>
    ;

PathPrimary
    : uri           << ast.NewPathPattern($0) >>
    | "a"           << ast.NewPathPattern($0) >>
    | url           << ast.NewPathPattern($0) >>
    | "(" Path ")"  << $1, nil >>
    ;

PathMod
    : "?"           << ast.Pattern(ast.PATTERN_ZERO_ONE), nil >>
    | "*"           << ast.Pattern(ast.PATTERN_ZERO_PLUS), nil >>
    | "+"           << ast.Pattern(ast.PATTERN_ONE_PLUS), nil >>
    ;

RestOfWhereList
    : RestOfWhere           << $0, nil >>
    | RestOfWhereList RestOfWhere << ast.MergeGraphGroups($0, $1) >>
    ;

RestOfWhere
    : GraphPatternNotTriples Joiner TriplesBlock Joiner << ast.AddTriplesToGraphGroup($0, $2) >>
    | GraphPatternNotTriples Joiner   << $0, nil >>
    ;

Joiner
    : "."
    | empty
    ;


GraphPatternNotTriples
    : GroupGraphPattern             << $0, nil >>
    | GraphPatternNotTriples "UNION" GroupGraphPattern << ast.GraphGroupUnion($0, $2) >>
    ;

GroupGraphPattern
    : "{" GroupGraphPatternSub Joiner "}"      << $1, nil >>
    ;

GroupGraphPatternSub
    : TriplesBlock                              << ast.GraphGroupFromTriples($0) >>
    | GraphPatternNotTriples "." TriplesBlock   << ast.AddTriplesToGraphGroup($0, $2) >>
    | GroupGraphPatternSub GraphPatternNotTriples "." TriplesBlock
    ;
