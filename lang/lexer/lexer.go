// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/gtfierro/hod/lang/token"
)

const (
	NoState    = -1
	NumStates  = 56
	NumSymbols = 65
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '?'
1: ':'
2: '<'
3: '>'
4: ';'
5: 'S'
6: 'E'
7: 'L'
8: 'E'
9: 'C'
10: 'T'
11: '*'
12: 'C'
13: 'O'
14: 'U'
15: 'N'
16: 'T'
17: 'F'
18: 'R'
19: 'O'
20: 'M'
21: 'W'
22: 'H'
23: 'E'
24: 'R'
25: 'E'
26: '{'
27: '}'
28: '.'
29: '|'
30: '/'
31: 'a'
32: '('
33: ')'
34: '?'
35: '+'
36: 'U'
37: 'N'
38: 'I'
39: 'O'
40: 'N'
41: '"'
42: '_'
43: '-'
44: '_'
45: '\'
46: '-'
47: '#'
48: '%'
49: '$'
50: '@'
51: '_'
52: '-'
53: ' '
54: ':'
55: '"'
56: '"'
57: '\t'
58: '\n'
59: '\r'
60: ' '
61: 'A'-'Z'
62: 'a'-'z'
63: '0'-'9'
64: .
*/
