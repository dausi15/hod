// this file contains the set of query operators generated by the query planner
package db

import (
	"fmt"

	"github.com/gtfierro/hod/query"
	"github.com/mitghi/btree"
	"github.com/pkg/errors"
	"github.com/syndtr/goleveldb/leveldb"
)

type operation interface {
	run(ctx *queryContext, ctx2 *queryContext2) error
	String() string
	SortKey() string
	GetTerm() *queryTerm
}

// ?subject predicate object
// Find all subjects part of triples with the given predicate and object
type resolveSubject struct {
	term *queryTerm
}

func (rs *resolveSubject) String() string {
	return fmt.Sprintf("[resolveSubject %s]", rs.term)
}

func (rs *resolveSubject) SortKey() string {
	return rs.term.Subject.String()
}

func (rs *resolveSubject) GetTerm() *queryTerm {
	return rs.term
}

func (rs *resolveSubject) run(ctx *queryContext, ctx2 *queryContext2) error {
	// fetch the object from the graph
	object, err := ctx.db.GetEntity(rs.term.Object)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", rs.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}
	subjectVar := rs.term.Subject.String()
	// get all subjects reachable from the given object along the path
	subjects := ctx.db.getSubjectFromPredObject(object.PK, rs.term.Path)

	// new stuff
	ctx2.defineVariable(subjectVar, &keyTree{subjects}, true)

	return nil
}

// object predicate ?object
// Find all objects part of triples with the given predicate and subject
type resolveObject struct {
	term *queryTerm
}

func (ro *resolveObject) String() string {
	return fmt.Sprintf("[resolveObject %s]", ro.term)
}

func (ro *resolveObject) SortKey() string {
	return ro.term.Object.String()
}

func (ro *resolveObject) GetTerm() *queryTerm {
	return ro.term
}

func (ro *resolveObject) run(ctx *queryContext, ctx2 *queryContext2) error {
	// fetch the subject from the graph
	subject, err := ctx.db.GetEntity(ro.term.Subject)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", ro.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}
	objectVar := ro.term.Object.String()
	// get all objects reachable from the given subject along the path
	objects := ctx.db.getObjectFromSubjectPred(subject.PK, ro.term.Path)

	// new stuff
	ctx2.defineVariable(objectVar, &keyTree{objects}, true)

	return nil
}

// object ?predicate object
// Find all predicates part of triples with the given subject and subject
type resolvePredicate struct {
	term *queryTerm
}

func (op *resolvePredicate) String() string {
	return fmt.Sprintf("[resolvePredicate %s]", op.term)
}

func (op *resolvePredicate) SortKey() string {
	return op.term.Path[0].Predicate.String()
}

func (op *resolvePredicate) GetTerm() *queryTerm {
	return op.term
}

func (op *resolvePredicate) run(ctx *queryContext, ctx2 *queryContext2) error {
	// fetch the subject from the graph
	subject, err := ctx.db.GetEntity(op.term.Subject)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", op.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}
	// now get object
	object, err := ctx.db.GetEntity(op.term.Object)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", op.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}

	predicateVar := op.term.Path[0].Predicate.String()
	// get all preds w/ the given end object, starting from the given subject

	predicates := ctx.db.getPredicateFromSubjectObject(subject, object)

	// new stuff
	ctx2.defineVariable(predicateVar, &keyTree{predicates}, true)

	return nil
}

// ?sub pred ?obj
// Find all subjects and objects that have the given relationship
type restrictSubjectObjectByPredicate struct {
	term                *queryTerm
	parentVar, childVar string
}

func (rso *restrictSubjectObjectByPredicate) String() string {
	return fmt.Sprintf("[restrictSubObjByPred %s]", rso.term)
}

func (rso *restrictSubjectObjectByPredicate) SortKey() string {
	return rso.parentVar
}

func (rso *restrictSubjectObjectByPredicate) GetTerm() *queryTerm {
	return rso.term
}

func (rso *restrictSubjectObjectByPredicate) run(ctx *queryContext, ctx2 *queryContext2) error {
	var (
		subjectVar = rso.term.Subject.String()
		objectVar  = rso.term.Object.String()
	)

	// new stuff
	// this operator takes existing values for subjects and objects and finds the pairs of them that
	// are connected by the path defined by rso.term.Path.

	// test joined
	if ctx2.hasJoined(subjectVar) {
		subjects := ctx2.getValuesForVariable(subjectVar)
		subjects.Iter(func(subject Key) {
			reachableObjects := &keyTree{ctx2.db.getObjectFromSubjectPred(subject, rso.term.Path)}
			// we restrict the values in reachableObjects to those that we already have inside 'objectVar'
			ctx2.restrictToResolved(objectVar, reachableObjects)
			// for rows where 'subjectVar' is 'subject', we add the values from 'reachableObjects'
			// in the position for 'objectVar'
			ctx2.populateValues(subjectVar, subject, objectVar, reachableObjects)
		})
	} else if ctx2.hasJoined(objectVar) {
		objects := ctx2.getValuesForVariable(objectVar)
		objects.Iter(func(object Key) {
			reachableSubjects := &keyTree{ctx2.db.getSubjectFromPredObject(object, rso.term.Path)}
			ctx2.restrictToResolved(subjectVar, reachableSubjects)
			ctx2.populateValues(objectVar, object, subjectVar, reachableSubjects)
		})
		// TODO: use cardinality of rows, not of unique values
		// we start with whichever has fewer values (subject or object). For each of them, we search
		// the graph for reachable endpoints (object or subject) on the provided path (rso.term.Path)
		// neither is joined
	} else if ctx2.cardinalityUnique(subjectVar) < ctx2.cardinalityUnique(objectVar) {
		subjects := ctx2.getValuesForVariable(subjectVar)
		subjects.Iter(func(subject Key) {
			reachableObjects := &keyTree{ctx2.db.getObjectFromSubjectPred(subject, rso.term.Path)}
			ctx2.restrictToResolved(objectVar, reachableObjects)
			ctx2.populateValues(subjectVar, subject, objectVar, reachableObjects)
		})
	} else {
		objects := ctx2.getValuesForVariable(objectVar)
		objects.Iter(func(object Key) {
			reachableSubjects := &keyTree{ctx2.db.getSubjectFromPredObject(object, rso.term.Path)}
			ctx2.restrictToResolved(subjectVar, reachableSubjects)
			ctx2.populateValues(objectVar, object, subjectVar, reachableSubjects)
		})
	}

	ctx2.markJoined(subjectVar)
	ctx2.markJoined(objectVar)

	return nil
}

// ?sub pred ?obj, but we have already resolved the object
// For each of the current
type resolveSubjectFromVarObject struct {
	term *queryTerm
}

func (rsv *resolveSubjectFromVarObject) String() string {
	return fmt.Sprintf("[resolveSubFromVarObj %s]", rsv.term)
}

func (rsv *resolveSubjectFromVarObject) SortKey() string {
	return rsv.term.Object.String()
}

func (rsv *resolveSubjectFromVarObject) GetTerm() *queryTerm {
	return rsv.term
}

// Use this when we have subject and object variables, but only object has been filled in
func (rsv *resolveSubjectFromVarObject) run(ctx *queryContext, ctx2 *queryContext2) error {
	var (
		objectVar  = rsv.term.Object.String()
		subjectVar = rsv.term.Subject.String()
	)

	objects := ctx2.getValuesForVariable(objectVar)
	objects.Iter(func(object Key) {
		reachableSubjects := &keyTree{ctx.db.getSubjectFromPredObject(object, rsv.term.Path)}
		ctx2.restrictToResolved(subjectVar, reachableSubjects)
		ctx2.populateValues(objectVar, object, subjectVar, reachableSubjects)
	})
	ctx2.markJoined(objectVar)
	ctx2.markJoined(subjectVar)

	return nil
}

type resolveObjectFromVarSubject struct {
	term *queryTerm
}

func (rov *resolveObjectFromVarSubject) String() string {
	return fmt.Sprintf("[resolveObjFromVarSub %s]", rov.term)
}

func (rov *resolveObjectFromVarSubject) SortKey() string {
	return rov.term.Subject.String()
}

func (rov *resolveObjectFromVarSubject) GetTerm() *queryTerm {
	return rov.term
}

func (rov *resolveObjectFromVarSubject) run(ctx *queryContext, ctx2 *queryContext2) error {
	var (
		objectVar  = rov.term.Object.String()
		subjectVar = rov.term.Subject.String()
	)
	subjects := ctx2.getValuesForVariable(subjectVar)
	subjects.Iter(func(subject Key) {
		reachableObjects := &keyTree{ctx.db.getObjectFromSubjectPred(subject, rov.term.Path)}
		ctx2.restrictToResolved(objectVar, reachableObjects)
		ctx2.populateValues(subjectVar, subject, objectVar, reachableObjects)
	})
	ctx2.markJoined(objectVar)
	ctx2.markJoined(subjectVar)

	return nil
}

type resolveObjectFromVarSubjectPred struct {
	term *queryTerm
}

func (op *resolveObjectFromVarSubjectPred) String() string {
	return fmt.Sprintf("[resolveObjFromVarSubPred %s]", op.term)
}

func (op *resolveObjectFromVarSubjectPred) SortKey() string {
	return op.term.Subject.String()
}

func (op *resolveObjectFromVarSubjectPred) GetTerm() *queryTerm {
	return op.term
}

// TODO: implement resolveObjectFromVarSubjectPred
// ?s ?p o
func (rov *resolveObjectFromVarSubjectPred) run(ctx *queryContext, ctx2 *queryContext2) error {
	return nil
}

type resolveSubjectObjectFromPred struct {
	term *queryTerm
}

func (op *resolveSubjectObjectFromPred) String() string {
	return fmt.Sprintf("[resolveSubObjFromPred %s]", op.term)
}

func (op *resolveSubjectObjectFromPred) SortKey() string {
	return op.term.Subject.String()
}

func (op *resolveSubjectObjectFromPred) GetTerm() *queryTerm {
	return op.term
}

// TODO: rewrite
func (rso *resolveSubjectObjectFromPred) run(ctx *queryContext, ctx2 *queryContext2) error {
	subsobjs := ctx.db.getSubjectObjectFromPred(rso.term.Path)
	subjectVar := rso.term.Subject.String()
	objectVar := rso.term.Object.String()

	ctx2.addValuePairs(subjectVar, objectVar, subsobjs)
	ctx2.markJoined(subjectVar)
	ctx2.markJoined(objectVar)
	return nil
}

type resolveSubjectPredFromObject struct {
	term *queryTerm
}

func (op *resolveSubjectPredFromObject) String() string {
	return fmt.Sprintf("[resolveSubPredFromObj %s]", op.term)
}

func (op *resolveSubjectPredFromObject) SortKey() string {
	return op.term.Path[0].Predicate.String()
}

func (op *resolveSubjectPredFromObject) GetTerm() *queryTerm {
	return op.term
}

// we have an object and want to find subjects/predicates that connect to it.
// If we have partially resolved the predicate, then we iterate through those connected to
// the known object and then pull the associated subjects. We then filter those subjects
// by anything we've already resolved.
// If we have *not* resolved the predicate, then this is easy: just graph traverse from the object
func (op *resolveSubjectPredFromObject) run(ctx *queryContext, ctx2 *queryContext2) error {
	subjectVar := op.term.Subject.String()
	predicateVar := op.term.Path[0].Predicate.String()

	// fetch the object from the graph
	object, err := ctx.db.GetEntity(op.term.Object)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", op.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}

	// get all predicates from it
	predicates := &keyTree{ctx.db.getPredicatesFromObject(object)}

	// TODO: augment the rows with this object with all [pred, subject] pairs, provided
	// that they
	var sub_pred_pairs [][]Key
	predicates.Iter(func(predicate Key) {
		if !ctx2.validValue(predicateVar, predicate) {
			return
		}
		path := []query.PathPattern{{Predicate: ctx.db.MustGetURI(predicate), Pattern: query.PATTERN_SINGLE}}
		subjects := ctx.db.getSubjectFromPredObject(object.PK, path)

		max := subjects.Max()
		// TODO: this can be a key tree?
		subjects.Ascend(func(_subject btree.Item) bool {
			subject := _subject.(Key)
			if !ctx2.validValue(subjectVar, subject) {
				return subject != max
			}
			sub_pred_pairs = append(sub_pred_pairs, []Key{subject, predicate})

			return subject != max
		})
	})

	ctx2.joinValuePairs(subjectVar, predicateVar, sub_pred_pairs)

	return nil
}

type resolvePredObjectFromSubject struct {
	term *queryTerm
}

func (op *resolvePredObjectFromSubject) String() string {
	return fmt.Sprintf("[resolvePredObjectFromSubject %s]", op.term)
}

func (op *resolvePredObjectFromSubject) SortKey() string {
	return op.term.Path[0].Predicate.String()
}

func (op *resolvePredObjectFromSubject) GetTerm() *queryTerm {
	return op.term
}

func (op *resolvePredObjectFromSubject) run(ctx *queryContext, ctx2 *queryContext2) error {
	objectVar := op.term.Object.String()
	predicateVar := op.term.Path[0].Predicate.String()

	// fetch the subject from the graph
	subject, err := ctx.db.GetEntity(op.term.Subject)
	if err != nil && err != leveldb.ErrNotFound {
		return errors.Wrap(err, fmt.Sprintf("%+v", op.term))
	} else if err == leveldb.ErrNotFound {
		return nil
	}

	// get all predicates from it
	predicates := &keyTree{ctx.db.getPredicatesFromSubject(subject)}

	// TODO: augment the rows with this object with all [pred, subject] pairs, provided
	// that they
	var pred_obj_pairs [][]Key
	predicates.Iter(func(predicate Key) {
		if !ctx2.validValue(predicateVar, predicate) {
			return
		}
		path := []query.PathPattern{{Predicate: ctx.db.MustGetURI(predicate), Pattern: query.PATTERN_SINGLE}}
		objects := ctx.db.getObjectFromSubjectPred(subject.PK, path)

		max := objects.Max()
		// TODO: this can be a key tree?
		objects.Ascend(func(_object btree.Item) bool {
			object := _object.(Key)
			if !ctx2.validValue(objectVar, object) {
				return object != max
			}
			pred_obj_pairs = append(pred_obj_pairs, []Key{predicate, object})

			return object != max
		})
	})

	ctx2.joinValuePairs(predicateVar, objectVar, pred_obj_pairs)

	return nil
}

// TODO: implement these for ?s ?p ?o constructs
// TODO: also requires query planner
type resolveVarTripleFromSubject struct {
	term *queryTerm
}

func (op *resolveVarTripleFromSubject) String() string {
	return fmt.Sprintf("[resolveVarTripleFromSubject %s]", op.term)
}

func (op *resolveVarTripleFromSubject) SortKey() string {
	return op.term.Subject.String()
}

func (op *resolveVarTripleFromSubject) GetTerm() *queryTerm {
	return op.term
}

// ?s ?p ?o; start from s
func (op *resolveVarTripleFromSubject) run(ctx *queryContext, ctx2 *queryContext2) error {
	// for all subjects, find all predicates and objects. Note: these predicates
	// and objects may be partially evaluated already
	var (
		subjectVar                     = op.term.Subject.String()
		objectVar                      = op.term.Object.String()
		predicateVar                   = op.term.Path[0].Predicate.String()
		subjects, _                    = ctx.getValues(subjectVar)
		knownPredicates, hadPredicates = ctx.getValues(predicateVar)
		candidateObjects               = newPointerTree(BTREE_DEGREE)
		candidatePredicates            = newPointerTree(BTREE_DEGREE)
	)

	//tree, found := ctx2.definitions[subjectVar]
	//if !found {
	//	return errors.New("no var defined")
	//}
	//tree.Iter(func(subjectKey Key) {
	//	subject := ctx.db.MustGetEntityFromHash(subjectKey)
	//    // TODO: add predKey, objectKey to list of pairs, then join that
	//    // onto the subject var
	//	for edge, objectList := range subject.OutEdges {
	//		predKey.FromSlice([]byte(edge))
	//		for _, objectKey := range objectList {
	//		}
	//	}
	//})

	maxSub := subjects.Max()
	var predKey Key
	subjectIter := func(subject *Entity) bool {
		linkedPredicates := newPointerTree(BTREE_DEGREE)
		for edge, objectList := range subject.OutEdges {
			predKey.FromSlice([]byte(edge))
			predicate := ctx.db.MustGetEntityFromHash(predKey)
			if hadPredicates && !knownPredicates.Has(predicate) {
				continue // skip
			}
			candidatePredicates.Add(predicate)
			linkedPredicates.Add(predicate)
			linkedObjects := newPointerTree(BTREE_DEGREE)
			for _, objectKey := range objectList {
				object := ctx.db.MustGetEntityFromHash(objectKey)
				candidateObjects.Add(object)
				linkedObjects.Add(object)
			}
			ctx.addReachable(predicate, predicateVar, linkedObjects, objectVar)
		}
		ctx.addReachable(subject, subjectVar, linkedPredicates, predicateVar)
		return subject != maxSub
	}
	subjects.Iter(subjectIter)
	ctx.addOrMergeVariable(objectVar, candidateObjects)
	ctx.addOrMergeVariable(predicateVar, candidatePredicates)
	return nil
}

type resolveVarTripleFromObject struct {
	term *queryTerm
}

func (op *resolveVarTripleFromObject) String() string {
	return fmt.Sprintf("[resolveVarTripleFromObject %s]", op.term)
}

func (op *resolveVarTripleFromObject) SortKey() string {
	return op.term.Object.String()
}

func (op *resolveVarTripleFromObject) GetTerm() *queryTerm {
	return op.term
}

// ?s ?p ?o; start from o
func (op *resolveVarTripleFromObject) run(ctx *queryContext, ctx2 *queryContext2) error {
	var (
		subjectVar                     = op.term.Subject.String()
		objectVar                      = op.term.Object.String()
		predicateVar                   = op.term.Path[0].Predicate.String()
		objects, _                     = ctx.getValues(objectVar)
		knownPredicates, hadPredicates = ctx.getValues(predicateVar)
		candidateSubjects              = newPointerTree(BTREE_DEGREE)
		candidatePredicates            = newPointerTree(BTREE_DEGREE)
	)

	maxObj := objects.Max()
	var predKey Key
	objectIter := func(object *Entity) bool {
		linkedPredicates := newPointerTree(BTREE_DEGREE)
		for edge, subjectList := range object.InEdges {
			predKey.FromSlice([]byte(edge))
			predicate := ctx.db.MustGetEntityFromHash(predKey)
			if hadPredicates && !knownPredicates.Has(predicate) {
				continue // skip
			}
			candidatePredicates.Add(predicate)
			linkedPredicates.Add(predicate)
			linkedSubjects := newPointerTree(BTREE_DEGREE)
			for _, subjectKey := range subjectList {
				subject := ctx.db.MustGetEntityFromHash(subjectKey)
				candidateSubjects.Add(subject)
				linkedSubjects.Add(subject)
			}
			ctx.addReachable(predicate, predicateVar, linkedSubjects, subjectVar)
		}
		ctx.addReachable(object, objectVar, linkedPredicates, predicateVar)
		return object != maxObj
	}
	objects.Iter(objectIter)
	ctx.addOrMergeVariable(subjectVar, candidateSubjects)
	ctx.addOrMergeVariable(predicateVar, candidatePredicates)
	return nil
}

type resolveVarTripleFromPredicate struct {
	term *queryTerm
}

func (op *resolveVarTripleFromPredicate) String() string {
	return fmt.Sprintf("[resolveVarTripleFromPredicate %s]", op.term)
}

func (op *resolveVarTripleFromPredicate) SortKey() string {
	return op.term.Path[0].Predicate.String()
}

func (op *resolveVarTripleFromPredicate) GetTerm() *queryTerm {
	return op.term
}

// ?s ?p ?o; start from p
func (op *resolveVarTripleFromPredicate) run(ctx *queryContext, ctx2 *queryContext2) error {
	// for all predicates, pull the entity from the predindex
	var (
		subjectVar        = op.term.Subject.String()
		objectVar         = op.term.Object.String()
		predicateVar      = op.term.Path[0].Predicate.String()
		predicates, _     = ctx.getValues(predicateVar)
		candidateObjects  = newPointerTree(BTREE_DEGREE)
		candidateSubjects = newPointerTree(BTREE_DEGREE)
	)
	predMax := predicates.Max()
	predIter := func(ent *Entity) bool {
		uri := ctx.db.MustGetURI(ent.PK)
		predicate := ctx.db.predIndex[uri]
		// iter through subjects
		linkedSubjects := newPointerTree(BTREE_DEGREE)
		for subStrHash, subjectMap := range predicate.Subjects {
			var subjectHash Key
			copy(subjectHash[:], []byte(subStrHash))
			subject := ctx.db.MustGetEntityFromHash(subjectHash)
			candidateSubjects.Add(subject)
			linkedSubjects.Add(subject)
			linkedObjects := newPointerTree(BTREE_DEGREE)
			// link objects to subject
			for objStrHash := range subjectMap {
				var objectHash Key
				copy(objectHash[:], []byte(objStrHash))
				object := ctx.db.MustGetEntityFromHash(objectHash)
				candidateObjects.Add(object)
				linkedObjects.Add(object)
			}
			ctx.addReachable(subject, subjectVar, linkedObjects, objectVar)
		}
		ctx.addReachable(ent, predicateVar, linkedSubjects, subjectVar)
		return ent != predMax
	}
	predicates.Iter(predIter)
	ctx.addOrMergeVariable(objectVar, candidateObjects)
	ctx.addOrMergeVariable(subjectVar, candidateSubjects)
	return nil
}

type resolveVarTripleAll struct {
	term *queryTerm
}

func (op *resolveVarTripleAll) String() string {
	return fmt.Sprintf("[resolveVarTripleAll %s]", op.term)
}

func (op *resolveVarTripleAll) SortKey() string {
	return op.term.Subject.String()
}

func (op *resolveVarTripleAll) GetTerm() *queryTerm {
	return op.term
}

// ?s ?p ?o; start from s
func (op *resolveVarTripleAll) run(ctx *queryContext, ctx2 *queryContext2) error {
	return nil
}
